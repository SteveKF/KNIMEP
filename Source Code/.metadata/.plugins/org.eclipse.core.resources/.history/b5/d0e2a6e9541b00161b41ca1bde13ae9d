import java.util.List;
import java.util.ArrayList;

public class BNL {

	private final int wSize;
	private final int numDims;

	private int countIn;
	private int countOut;

	private ArrayList<float[]> window;
	private ArrayList<float[]> points;
	private ArrayList<float[]> tmpFile;
	private ArrayList<float[]> input;
	private ArrayList<float[]> output;

	/**
	 * Block Nested Loop Algorithm
	 * 
	 * @param wSize
	 *            maximum size of the window
	 * @param numDims
	 *            the number of dimensions of the points which will be added
	 */
	public BNL(int wSize, int numDims) {
		assert (wSize > 0 && numDims > 0);
		this.wSize = wSize;
		this.numDims = numDims;
		points = new ArrayList<>();
	}

	public void addPoint(float[] point) {
		assert (point.length == numDims);
		points.add(point);
	}

	public void computeSky() {
		initialize();
		scanDatabase();
		flushMemory();
	}

	private void initialize() {
		input = points;
		tmpFile = new ArrayList<>();
		window = new ArrayList<>();
		output = new ArrayList<>();
		countIn = 0;
		countOut = 0;
	}

	private void scanDatabase() {
		while (input.size() != 0) {
			for (float[] p : window) {

			}
		}
	}

	private void flushMemory() {
		for (float[] p : window) {
			output.add(p);
			window.remove(p);
		}
	}

	private boolean dominates(float[] a, float[] b) {
		int domDims = 0;
		for (int i = 0; i < numDims; i++) {
			if (a[i] > b[i]) {
				domDims += 2;
			} else if (a[i] == b[i]) {
				domDims++;
			}
		}
		if (domDims > numDims) {
			return true;
		} else {
			return false;
		}
	}

	private class DataPoint {
		
		private float[] dataPoint;
		private int timestamp;
		
		private DataPoint(float[] dataPoint, int timestamp){
			assert (dataPoint.length == numDims);
			this.dataPoint = dataPoint;
			this.timestamp = timestamp;
		}
		}
	}
}
