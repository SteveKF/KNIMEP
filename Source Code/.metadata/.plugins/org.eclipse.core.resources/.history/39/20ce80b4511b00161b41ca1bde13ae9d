import java.util.List;
import java.util.ArrayList;

public class BNL {

	private final int wSize;
	private final int numDims;

	private ArrayList<float[]> window;
	private ArrayList<float[]> points;
	private ArrayList<float[]> tmpFile;
	
	 /**
	   * Block Nested Loop Algorithm
	   * 
	   * @param wSize
	   *          maximum size of the window
	   * @param numDims
	   *          the number of dimensions of the points which will be added
	   */

	public BNL(int wSize, int numDims) {
		assert (wSize > 0 && numDims > 0);
		this.wSize = wSize;
		this.numDims = numDims;
		points = new ArrayList<>();
		tmpFile = new ArrayList<>();
		window = new ArrayList<>();
	}

	public void addPoint(float[] point) {
		assert (point.length == numDims);
		points.add(point);
	}

	public void computeSky() {
		compareToWindow(points);
		while (tmpFile.size() != 0) {
			compareToWindow(tmpFile);
		}
	}
	
	private void compareToWindow(List<float[]> l){
		for (int i = 0; i < l.size(); i++) {
			if (window.size() == 0) {
				window.add(l.get(i));
				l.remove(i);
			} else {
				for (int j = 0; j < window.size(); j++) {
					if (dominates(window.get(j), l.get(i))) {
						l.remove(i);
					} else if (dominates(l.get(i), window.get(j))) {
						window.remove(j);
						window.add(points.get(i));
					} else {
						if (window.size() < wSize) {
							window.add(points.get(i));
						} else {
							tmpFile.add(points.get(i));
						}
					}
				}
			}
		}
	}

	private boolean dominates(float[] a, float[] b) {
		int domDims = 0;
		for (int i = 0; i < numDims; i++) {
			if (a[i] > b[i]) {
				domDims += 2;
			} else if (a[i] == b[i]) {
				domDims++;
			}
		}
		if (domDims > numDims) {
			return true;
		} else {
			return false;
		}
	}
}
