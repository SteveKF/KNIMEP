package org.knime.bnl;

import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;

import org.knime.core.data.DataCell;
import org.knime.core.data.DataRow;
import org.knime.core.data.RowKey;
import org.knime.core.node.InvalidSettingsException;
import org.knime.core.node.ModelContentRO;
import org.knime.core.node.ModelContentWO;

public class BNLStructure{

	// options to save all row ids, skyline ids or the selected columns
	// (dimensions)
	public enum SaveOption {
		ALL, SKYLINE
	};

	private List<DataCell> row;
	
	private SaveOption option;

	private static final String CFG_KEY_ALL = "allRowIds";
	private static final String CFG_KEY_SKY = "skyRowIds";

	public BNLStructure(DataRow row, SaveOption option) {
		
		assert(option == SaveOption.ALL || option == SaveOption.SKYLINE);
		
		this.row = new LinkedList<DataCell>();
		for(int i=0; i < row.getNumCells(); i++){
			this.row.add(row.getCell(i));
		}
		this.option = option;
	}

	public BNLStructure(SaveOption option) {
		
		assert(option == SaveOption.ALL || option == SaveOption.SKYLINE);
		
		this.option = option;
		row = new LinkedList<>();
	}

	// ************* loading and saving of internal representation ***********

	/**
	 * Adds the IDs of the contained rows to the settings. That's enough to
	 * later on restore the visual representation, since that only depends on
	 * the dimension of the panel and the number of contained rows per bin.
	 * 
	 * @param modelContent
	 *            the model content object to save to.
	 */
	public void saveTo(final ModelContentWO modelContent) {

		DataCell[] cellArray = new DataCell[row.size()];
		
		switch (option) {

		case ALL:
			row.toArray(cellArray);
			modelContent.addDataCellArray(CFG_KEY_ALL,cellArray);
			break;
		case SKYLINE:
			row.toArray(cellArray);
			modelContent.addDataCellArray(CFG_KEY_SKY, cellArray);
			break;
		default:
			System.err.println("No SaveOption was chosen");
		}
	}

	/**
	 * Loads the contained row IDs.
	 * 
	 * @param modelContent
	 *            to read contained RowKeys from.
	 * @throws InvalidSettingsException
	 *             if the settings are invalid
	 */
	public void loadFrom(final ModelContentRO modelContent, SaveOptions option) throws InvalidSettingsException {

		switch (option) {

		case ALL:
			DataCell[] cellArray = modelContent.DataCellArray(CFG_KEY_ALL);
			allRowIds.addAll(Arrays.asList(allArray));
			break;
		case SKYLINE:
			RowKey[] skyArray = modelContent.getRowKeyArray(CFG_KEY_SKY);
			skyRowIds.addAll(Arrays.asList(skyArray));
			break;
		case COLUMNS:
			break;
		default:

		}
	}
}
