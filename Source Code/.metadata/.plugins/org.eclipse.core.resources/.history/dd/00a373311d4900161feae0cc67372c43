package org.knime.bnl;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.Shape;
import java.awt.geom.Ellipse2D;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;

import javax.swing.JPanel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.chart.title.TextTitle;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.knime.bnl.BNL.DataPoint;
import org.knime.core.data.DataCell;
import org.knime.core.data.DataRow;
import org.knime.core.data.DoubleValue;
import org.knime.core.data.RowKey;
import org.knime.core.node.BufferedDataTable;

public class BlockNestedLoopViewPanel extends JPanel {

	private static final long serialVersionUID = -3807907228824920209L;
	
	private List<BNLStructure> dominatedPoints;
	private List<BNLStructure> skyline;
	
	private boolean plot = false;

	public enum DataType {
		DOMINATEDPOINT, SKYLINEPOINT
	};
	
	public BlockNestedLoopViewPanel(List<BNLStructure> dominatedPoints, List<BNLStructure> skyline ) {
		super(new GridLayout(2,2));
		
		//assert(bnl.getAllData().getFirst().getCoordinates().length == 2);
		
		this.dominatedPoints = dominatedPoints;
		this.skyline = skyline;
		
		
		int[] indexes_xy = new int[]{0,1};

		int[] indexes_xz = new int[]{0,1};
		

		int[] indexes_yz = new int[]{0,1};
		
		JFreeChart chart = createChart();
		ChartPanel panel = new ChartPanel(chart);
		panel.setMouseWheelEnabled(true);
		
		add(panel);
		
		if(plot){
			JFreeChart chart2 = createChart();
			ChartPanel panel2 = new ChartPanel(chart2);
			panel2.setMouseWheelEnabled(true);
			
			JFreeChart chart3 = createChart();
			ChartPanel panel3 = new ChartPanel(chart3);
			panel3.setMouseWheelEnabled(true);
			
			add(panel2);
			add(panel3);
		}

		setSize(panel.getPreferredSize());
	}

	/**
	 * Creates a sample chart.
	 *
	 * @return A sample chart.
	 */
	private JFreeChart createChart(int[] indexes) {

		XYDataset dataset = createDataset("Dominated Points", DataType.DOMINATEDPOINT, indexes);
		
		JFreeChart chart = ChartFactory.createXYLineChart("XYLineAndShapeRenderer Demo 2", "X", "Y", dataset,
				PlotOrientation.VERTICAL, true, true, false);
		TextTitle subtitle = new TextTitle(
				"This chart shows various " + "combinations of the useFillPaint and useOutlinePaint flags.");
		subtitle.setFont(new Font("Dialog", Font.PLAIN, 10));
		chart.addSubtitle(subtitle);

		ChartUtilities.applyCurrentTheme(chart);

		XYPlot plot = (XYPlot) chart.getPlot();

		NumberAxis yAxis = (NumberAxis) plot.getRangeAxis();
		yAxis.setAutoRangeIncludesZero(false);

		Shape shape = new Ellipse2D.Double(-4.0, -4.0, 8.0, 8.0);

		// renderer of non-skyline points
		XYLineAndShapeRenderer renderer1 = (XYLineAndShapeRenderer) plot.getRenderer();
		renderer1.setBaseShapesVisible(true);
		renderer1.setSeriesShape(0, shape);
		renderer1.setSeriesFillPaint(0, Color.white);
		renderer1.setSeriesOutlinePaint(0, Color.black);
		renderer1.setUseFillPaint(true);
		renderer1.setUseOutlinePaint(true);
		renderer1.setSeriesLinesVisible(0, false);

		XYDataset dataset2 = createDataset("Skyline", DataType.SKYLINEPOINT, indexes);
		// renderer of skyline points
		XYLineAndShapeRenderer renderer2 = new XYLineAndShapeRenderer();
		plot.setDataset(1, dataset2);
		plot.setRenderer(1, renderer2);
		renderer2.setSeriesShape(0, shape);
		renderer2.setSeriesPaint(0, Color.black);
		renderer2.setSeriesLinesVisible(0, false);

		return chart;
	}


	private XYDataset createDataset(String name, DataType type, int[] indexes) {

		XYSeries series = new XYSeries(name);
	
		
		switch (type) {
		case DOMINATEDPOINT:
			addSeriesPoint(series,dominatedPoints, indexes);
			break;

		case SKYLINEPOINT:
			addSeriesPoint(series,skyline, indexes);
			break;

		default:
			System.err.println("Wrong DataType was used for adding point to the DataSet");
			break;
		}

	XYSeriesCollection dataset = new XYSeriesCollection();
	dataset.addSeries(series);

	return dataset;
	}
	
	private void addSeriesPoint(XYSeries series, List<BNLStructure> list, int[] indexes){
		for(int i=0; i < list.size(); i++){
			double[] values = new double[2];
			for(int j=0; j < list.get(i).getRow().size(); j++){
				DataCell currCell = list.get(i).getRow().get(j);
				values[j] = ((DoubleValue) currCell).getDoubleValue();
			}
			series.add(values[indexes[0]], values[indexes[1]]);
		}
	}
}