package util;

import java.util.Map;

import javax.swing.tree.DefaultMutableTreeNode;

import gui.PriorityPanel;
import layered.LayeredPreference;
import save.NumericPreference;

public class SQLGenerator {
	
	private PriorityPanel priorityPanel;
	private Map<String, NumericPreference> numericPreferences;
	private Map<String, LayeredPreference> layeredPreferences;
	
	public SQLGenerator(PriorityPanel priorityPanel,
			Map<String, NumericPreference> numericPreferences,
			Map<String, LayeredPreference> layeredPreferences){
		
		this.priorityPanel = priorityPanel;
		this.numericPreferences = numericPreferences;
		this.layeredPreferences = layeredPreferences;
		
	}
	
	public void setPriorityPanel(PriorityPanel priorityPanel){
		this.priorityPanel = priorityPanel;
	}
	
	public String createLayeredStatement(String dimension) {

		StringBuffer layered = new StringBuffer("CASE "+dimension+" ");

		LayeredPreference lp = layeredPreferences.get(dimension);
		int num_positive_layers = lp.getLayeredDialog().getPositiveLayerSize();
		int num_negative_layers = -1;
		
		boolean isNegative = false;

		DefaultMutableTreeNode rootNode = lp.getLayeredDialog().getRootNode();

		for (int i = 0; i < rootNode.getChildCount(); i++) {

			DefaultMutableTreeNode layer = (DefaultMutableTreeNode) rootNode.getChildAt(i);

			if (layer.getChildCount() > 0) {
				
				layered.append("WHEN " + dimension + " IN (");

				for (int j = 0; j < layer.getChildCount(); j++) {
					layered.append(layer.getChildAt(j));

					if (j < layer.getChildCount() - 1) {
						layered.append(", ");
					}
				}

				if (layer.toString().equals("Layer 0")) {

					layered.append(") THEN 0 ");
					isNegative = true;

				} else {

					if(!isNegative){
						layered.append(") THEN " + num_positive_layers-- + " ");
					}else{
						layered.append(") THEN " + num_negative_layers-- + " ");
					}

				}
			}else if(layer.toString().equals("Layer 0")){
				isNegative = true;
			}
		}

		layered.append("END");

		return layered.toString();

	}

	public String createSelectStatement(String dimension, DefaultMutableTreeNode node) {

		StringBuffer statement = new StringBuffer("");

		if (node.toString().contains(Preference.Lowest.toString())) {

			statement.append(dimension);

		} else if (node.toString().contains(Preference.Highest.toString())) {

			statement.append(dimension);

		} else if (node.toString().contains(Preference.Around.toString())) {

			double around = numericPreferences.get(dimension).getNumericInput()[0];

			statement.append("abs(" + dimension + "/" + around + ")");

		} else if (node.toString().contains(Preference.Between.toString())) {

			double low = numericPreferences.get(dimension).getNumericInput()[0];
			double up = numericPreferences.get(dimension).getNumericInput()[1];

			statement.append("CASE " + dimension + " " + "WHEN " + dimension + " >= " + low + " AND " + dimension
					+ " <= " + up + " THEN 0 " + "WHEN " + dimension + " < " + low + " THEN CEILING(" + low + " - "
					+ dimension + ") " + "WHEN " + dimension + " > " + up + " THEN CEILING(" + dimension + "-" + up
					+ ")" + " END");

		} else if (node.toString().contains(Preference.Boolean.toString())) {

			String bool = numericPreferences.get(dimension).getBooleanInput();

			statement.append("" + dimension + " " + bool + "");
		} else if (node.toString().contains(Preference.Layered.toString())) {

			statement.append(createLayeredStatement(dimension));

		}

		return statement.toString();

	}

	public String createSQLQuery(String dimension, DefaultMutableTreeNode rootNode) {

		StringBuffer query = new StringBuffer("Select ");

		for (int i = 0; i < rootNode.getChildCount(); i++) {

			DefaultMutableTreeNode priorityNode = (DefaultMutableTreeNode) rootNode.getChildAt(i);

			for (int j = 0; j < priorityNode.getChildCount(); j++) {

				DefaultMutableTreeNode node = (DefaultMutableTreeNode) priorityNode.getChildAt(j);

				if (node.toString().contains("Pareto ")) {

					query.append("(");

					for (int n = 0; n < node.getChildCount(); n++) {

						query.append(createSelectStatement(dimension, (DefaultMutableTreeNode) node.getChildAt(n)));

						if (node.getChildCount() > 1 && n < node.getChildCount() - 1) {
							query.append(" AND ");
						}
					}

					query.append(")");

				} else {
					query.append(createSelectStatement(dimension, node));
				}

				if (j < priorityNode.getChildCount() - 1) {
					query.append(", ");
				}
			}

			if (i < rootNode.getChildCount() - 1) {
				query.append(", ");
			}
		}

		query.append(" FROM");

		return query.toString();

	}

	public String createPreferenceSQLQuery(DefaultMutableTreeNode rootNode) {

		StringBuffer query = new StringBuffer("PREFERRING ");

		for (int i = 0; i < rootNode.getChildCount(); i++) {

			// LOOP PRIORITY NODES

			for (int j = 0; j < rootNode.getChildAt(i).getChildCount(); j++) {

				// LOOP PARETO OR PREFERENCE NODES

				if (rootNode.getChildAt(i).getChildAt(j).toString().contains("Pareto ")) {

					if (rootNode.getChildAt(i).getChildAt(j).getChildCount() > 1) {
						query.append("(");
					}

					for (int n = 0; n < rootNode.getChildAt(i).getChildAt(j).getChildCount(); n++) {

						// LOOP PREFERENCE NODES

						query.append("" + rootNode.getChildAt(i).getChildAt(j).getChildAt(n).toString() + " ");

						if (n != rootNode.getChildAt(i).getChildAt(j).getChildCount() - 1) {
							query.append("AND ");
						}

					}

					if (rootNode.getChildAt(i).getChildAt(j).getChildCount() > 1) {
						query.append(") ");
					}
				} else {
					query.append("" + rootNode.getChildAt(i).getChildAt(j).toString() + " ");
				}

				if (j != rootNode.getChildAt(i).getChildCount() - 1) {
					query.append("AND ");
				}

			}

			if (i != rootNode.getChildCount() - 1) {
				query.append("PRIOR TO ");
			}

		}

		return query.toString();
	}
	
	// TODO : print method for test
	public void print(String dimension) {

		if (priorityPanel != null) {
			if (priorityPanel.getRootNode() != null) {
				System.out.println(createPreferenceSQLQuery(priorityPanel.getRootNode()));
				System.out.println();
				System.out.println(createSQLQuery(dimension, priorityPanel.getRootNode()));
			}
		}
	}
	
	


}
